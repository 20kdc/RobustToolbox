using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using JetBrains.Annotations;
using Robust.Client.UserInterface;
using Robust.Shared.Asynchronous;
using Robust.Shared.ContentPack;
using Robust.Shared.IoC;
using Robust.Shared.Utility;

namespace Robust.Client.Debugging.XAMLUI
{
#if DEBUG
    public class XamlUiHotreloadManager
    {
        [Dependency] public readonly IResourceManager Resources = default!;
        [Dependency] public readonly ITaskManager TaskManager = default!;

        private bool _initialized;
        private HashSet<ResourcePath> _hasChanged = new();
        private readonly List<FileSystemWatcher> _watchers = new();

        public void Initialize()
        {
            if (_initialized)
                throw new InvalidOperationException($"{nameof(XamlUiHotreloadManager)} has already been initialized.");

            _initialized = true;
            WatchResources();
        }

        /// <summary>
        /// Called by autogenerated XAMLUI-Populate Trampoline method.
        /// Will compile and use a new populate method if the xaml file was updated
        /// </summary>
        /// <param name="control"></param>
        /// <typeparam name="T"></typeparam>
        /// <returns>Returns true if the control was populated over hot-reloaded.</returns>
        [UsedImplicitly]
        public bool TryHotReloading<T>(T control) where T : Control
        {
            return false;
        }

        private void WatchResources()
        {
            foreach (var path in Resources.GetContentRoots().Select(r => r.ToString())
                .Where(r => Directory.Exists(r + "/Prototypes")).Select(p => p + "/Prototypes"))
            {
                var watcher = new FileSystemWatcher(path, "*.yml")
                {
                    IncludeSubdirectories = true,
                    NotifyFilter = NotifyFilters.LastWrite
                };

                watcher.Changed += (_, args) =>
                {
                    switch (args.ChangeType)
                    {
                        case WatcherChangeTypes.Renamed:
                        case WatcherChangeTypes.Deleted:
                            return;
                        case WatcherChangeTypes.Created:
                        // case WatcherChangeTypes.Deleted:
                        case WatcherChangeTypes.Changed:
                        case WatcherChangeTypes.All:
                            break;
                        default:
                            throw new ArgumentOutOfRangeException();
                    }

                    TaskManager.RunOnMainThread(() =>
                    {
                        var file = new ResourcePath(args.FullPath);

                        foreach (var root in IoCManager.Resolve<IResourceManager>().GetContentRoots())
                        {
                            if (!file.TryRelativeTo(root, out var relative))
                            {
                                continue;
                            }

                            _hasChanged.Add(relative);
                        }
                    });
                };

                watcher.EnableRaisingEvents = true;
                _watchers.Add(watcher);
            }
        }
    }
#endif
}
